"""Add text_content to narrations and make job_id nullable

Revision ID: c1a2b3d4e5f6
Revises: b44a70f35493
Create Date: 2025-09-28 10:30:00.123456

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c1a2b3d4e5f6'
down_revision: Union[str, None] = 'b44a70f35493'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('narrations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('text_content', sa.Text(), nullable=True))
        batch_op.alter_column('job_id',
               existing_type=sa.UUID(),
               nullable=True)
        # Remove a constraint de unicidade de job_id, se ela foi criada anteriormente
        # O ideal seria uma constraint condicional, mas para esta evolução, a remoção é mais simples.
        try:
            batch_op.drop_constraint('narrations_job_id_key', type_='unique')
        except Exception:
            # Ignora o erro se a constraint não existir com este nome.
            # O nome pode variar entre sistemas de banco de dados.
            pass

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('narrations', schema=None) as batch_op:
        # Adiciona a constraint de volta no downgrade
        batch_op.create_unique_constraint('narrations_job_id_key', ['job_id'])
        batch_op.alter_column('job_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.drop_column('text_content')

    # ### end Alembic commands ###